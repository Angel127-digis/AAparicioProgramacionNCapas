@model ML.Usuario

@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<section class="contenedorForm">

    @using (Html.BeginForm("Form", "Usuario", FormMethod.Post, new { @enctype = "multipart/form-data", @id = "form" }))
    {
        <section class="FormUsuario">
            <h2>Usuario</h2>
            <hr />
            <div class="ocultar">
                @Html.HiddenFor(model => model.IdUsuario)
                @Html.HiddenFor(model => model.Imagen)
            </div>
            <div>
                @if (Model.Imagen != null)
                {
                    <div class="contenedor--img">
                        <img id="img" class="img" src="data:image/*;base64, @Convert.ToBase64String(Model.Imagen)">
                    </div>
                }
                else
                {
                    <div class="contenedor--img">
                        <img id="img" class="img" src="https://static.vecteezy.com/system/resources/previews/024/983/914/non_2x/simple-user-default-icon-free-png.png" alt="Img Usuario">
                    </div>
                }
                <input type="file" id="inputFileImagen" name="inputFileImagen" onchange="validarImagen(), visualizarImagen(this)" />
            </div>
            <div>
                @Html.TextBoxFor(model => model.UserName, new { @required = "required", @class = "soloLetras borrarSpam" })
                @Html.LabelFor(model => model.UserName)
                <sapam class="error"></sapam>
            </div>

            <div>
                @Html.TextBoxFor(model => model.Nombre, new { @required = "required", @class = "soloLetras borrarSpam" })
                @Html.LabelFor(model => model.Nombre)
                <sapam class="error"></sapam>
            </div>

            <div>
                @Html.TextBoxFor(model => model.ApellidoPaterno, new { @required = "required", @class = "soloLetras borrarSpam" })
                @Html.LabelFor(model => model.ApellidoPaterno)
                <sapam class="error"></sapam>
            </div>

            <div>
                @Html.TextBoxFor(model => model.ApellidoMaterno, new { @class = "soloLetras borrarSpam" })
                @Html.LabelFor(model => model.ApellidoMaterno)
                <sapam class="error"></sapam>
            </div>

            <div>
                @Html.TextBoxFor(model => model.Email, new { @class = "validarEmail borrarSpam" })
                @Html.LabelFor(model => model.Email)
                <sapam class="error"></sapam>
            </div>

            <div>
                @Html.TextBoxFor(model => model.Password, new { @required = "required", @class = "validarContrasenia borrarSpam", @id = "contraseniaUno" })
                @Html.LabelFor(model => model.Password)
                <sapam class="error"></sapam>
            </div>

            <div>
                @Html.TextBoxFor(model => model.Password, new { @required = "required", @class = "validarContrasenia borrarSpam", @id = "contraseniaDos" })
                <label>Confirmar contraseña</label>
                <sapam class="error"></sapam>
            </div>

            <div>
                <input type="text" id="datepicker" name="FechaNacimiento" value="@Model.FechaNacimiento" required>
                @Html.LabelFor(model => model.FechaNacimiento)
                <sapam class="error"></sapam>
            </div>

            <div>
                @Html.TextBoxFor(model => model.Sexo, new { @required = "required", @class = "soloLetras borrarSpam" })
                @Html.LabelFor(model => model.Sexo)
                <sapam class="error"></sapam>
                @*<div class="input--radio">
                        <input type="radio" name="sexo" value="H">
                        <label for="sexo">H</label>
                    </div>
                    <div class="input--radio">
                        <input type="radio" name="sexo" value="M">
                        <label for="sexo">M</label>
                    </div>*@
            </div>

            <div>
                @Html.TextBoxFor(model => model.Telefono, new { @required = "required", @class = "soloNumeros borrarSpam" })
                @Html.LabelFor(model => model.Telefono)
                <sapam class="error"></sapam>
            </div>

            <div>
                @Html.TextBoxFor(model => model.Celular, new { @class = "soloNumeros borrarSpam bordeVerde" })
                @Html.LabelFor(model => model.Celular)
                <sapam class="error"></sapam>
            </div>

            <div>
                @Html.TextBoxFor(model => model.Estatus, new { @required = "required", @class = "borrarSpam bordeVerde" })
                @Html.LabelFor(model => model.Estatus)
            </div>

            <div>
                @Html.TextBoxFor(model => model.CURP, new { @for = "CURP", @id = "curp_input", @oninput = "validarInput(this)", @class = "borrarSpam" })
                @Html.LabelFor(model => model.CURP, new { @name = "CURP" })
                <sapam class="error"></sapam>
            </div>
            <div>
                @Html.DropDownListFor(model => model.Rol.IdRol, new SelectList(Model.Rol.Rols, "IdRol", "Nombre"), "Seleccione una opcion", new { @class = "form-select" })
            </div>
        </section>
        <section class="formDireccion">
            <h2>Direccion</h2>
            <hr />
            <div>
                @Html.TextBoxFor(model => model.Direccion.Calle, new { @class = "colorInput" })
                @Html.LabelFor(model => model.Direccion.Calle)
            </div>
            <div>
                @Html.TextBoxFor(model => model.Direccion.NumeroInterior, new { @class = "colorInput" })
                @Html.LabelFor(model => model.Direccion.NumeroInterior)
            </div>
            <div>
                @Html.TextBoxFor(model => model.Direccion.NumeroExterior, new { @class = "colorInput" })
                @Html.LabelFor(model => model.Direccion.NumeroExterior)
            </div>

            <div>
                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Estados, "IdEstado", "Nombre"), "Seleccione un Estado", new { @onchange = "MunicipioGetByIdEstado()", @id = "ddlEstado", @class = "form-select" })
            </div>
            @if (Model.Direccion.Colonia.Municipio.Municipios != null)
            {
                <div>
                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(Model.Direccion.Colonia.Municipio.Municipios, "IdMunicipio", "Nombre"), "Seleccione un Municipio", new { @onchange = "ColoniaGetByIdMunicipio()", @id = "ddlMunicipio", @class = "form-select" })
                </div>
            }
            else
            {
                <div>
                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(String.Empty), "Seleccione un Municipio", new { @onchange = "ColoniaGetByIdMunicipio()", @id = "ddlMunicipio", @class = "form-select" })
                </div>
            }
            @if (Model.Direccion.Colonia.Colonias != null)
            {
                <div>
                    @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(Model.Direccion.Colonia.Colonias, "IdColonia", "Nombre"), "Seleccione una Colonia", new { @id = "ddlColonia", @class = "form-select" })
                </div>
            }
            else
            {
                <div>
                    @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(String.Empty), "Seleccione una Colonia", new { @id = "ddlColonia", @class = "form-select" })
                </div>
            }


            <div>
                <button href="@Url.Action("GetAll", "Usuario")" class="btn btn-primary">Enviar</button>
            </div>

        </section>
    }
</section>

<style>
    @@import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css");

    :root {
        --colorInput: #219ebc;
        --colorFocus: #8ea604;
    }

    .contenedorForm {
        width: 100%;
        margin: 0 auto;
        /*        border: solid;*/
    }

    form {
        border-radius: 20px;
        background-color: #48cae424;
        float: left;
        padding: 30px 0;
        /*        border: solid;*/
        width: 100%;
        text-align: center;
    }

        form div {
            position: relative;
            text-align: center;
            /*            border: solid;*/
            display: inline-block;
            margin: 0 30px 20px;
            width: 28%;
        }

    .contenedor--img {
        width: 100px;
        height: 100px;
        position: initial;
        border: solid;
    }

    .img {
        width: 100%;
        height: 100%;
    }

    .inputImg {
        border: none;
        text-align: center;
    }

    .ocultar {
        overflow: hidden;
        display: none;
    }

    input {
        outline: none;
        border: .5px solid var(--colorInput);
        font-size: .8rem;
        padding: 5px;
        width: 100%;
        max-width: initial;
    }

    .input--radio,
    div:has(.input--radio) {
        display: flex;
    }

    input[type="radio"] + label {
        position: initial;
    }



    label {
        position: absolute;
        left: 5px;
        top: -9px;
        font-size: .7em;
        background-color: #fff;
        border-left: .5px solid var(--colorInput);
        border-right: .5px solid var(--colorInput);
    }

    .bordeVerde {
        border-color: green;
    }

    /*    input:focus + label {
        color: var(--colorFocus);
        border-left-color: var(--colorFocus);
        border-right-color: var(--colorFocus);
    }*/

    /*    input:focus {
        border-color: var(--colorFocus);
    }*/
</style>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.14.1/themes/base/jquery-ui.css">
<link rel="stylesheet" href="/resources/demos/style.css">
<script src="~/Scripts/jquery-3.7.0.js"></script>
<script src="https://code.jquery.com/jquery-3.7.1.js"></script>
<script src="https://code.jquery.com/ui/1.14.1/jquery-ui.js"></script>
<script>


        $("#datepicker").datepicker({
            dateFormat: "dd/mm/yy",
            showAnim: "slideDown"
        });

    $("#datepicker").change(e => {
        inputFecha = $("#datepicker")
        inputBorderColor = e.target;
        if (inputFecha.val() != "") {
            inputBorderColor.style.borderColor = "green"
        } else {
            inputBorderColor.style.borderColor = "red"
        }
    })

    //function cambiarColor() {
    //    let inputCelular = $('#celular')
    //    inputCelular.target.style.borderColor = "green"
    //}


    let MunicipioGetByIdEstado = () => {
        let ddl = $('#ddlEstado').val()
        $.ajax({
            url: "@Url.Action("GetByIdMunicipio", "Usuario")?idEstado="+ddl,
            type: "GET",
            dataType: "JSON",
            success: result => {
                if (result.Correct) {
                    //Buscar el ddl donde pinta el valor
                    let ddlMunicipio = $('#ddlMunicipio');
                    ddlMunicipio.empty();

                    let defaultSelect = `<option value="">Seleccione un Municipio</option>`
                    ddlMunicipio.append(defaultSelect)

                    $.each(result.Objects, (i, valor) => {
                        let option = `<option value="${valor.IdMunicipio}">${valor.Nombre}</option>`;
                        ddlMunicipio.append(option)

                    })

                }
            },
            error: xhr => {
                console.log(xhr)
            }
        })
    }
    let ColoniaGetByIdMunicipio = () => {
        let ddl = $('#ddlMunicipio').val()
        console.log(ddl)
        $.ajax({
            url: "@Url.Action("GetByIdColonia", "Usuario")?IdMunicipio=" + ddl,
            type: "GET",
            dataType: "JSON",
            success: result => {
                if (result.Correct) {
                    //Buscar el ddl donde pinta el valor
                    let ddlColonia = $('#ddlColonia');
                    ddlColonia.empty();

                    let defaultSelect = `<option value="">Seleccione una Colonia</option>`
                    ddlColonia.append(defaultSelect)

                    $.each(result.Objects, (i, valor) => {
                        let option = `<option value="${valor.IdColonia}">${valor.Nombre}</option>`;
                        ddlColonia.append(option)
                    })

                }
            },
            error: xhr => {
                console.log(xhr)
            }
        })
    }

    // Crear arreglos con extensiones permitidas
    let allowedImages = ['jpeg', 'jpg', 'gif', 'png'];

    // Obtener elemento y que solo admita imágenes
    let validarImagen = () => {
        //Saber la extension del archivo que me paso
        //Saber la extencion
        //dividir el nombre en 2, a traves del (.)

        let input = $('#inputFileImagen')[0].files[0].name.split('.').pop().toLowerCase()
        console.log(input)

        //Compararla con extensiones de imagen
        let extensionesValidas = ['png', 'jpg', 'jpeg', 'webp']
        let banderaImg = extensionesValidas.includes(input)
        console.log(banderaImg)
        if (!banderaImg) {
            alert(`Las extensiones permitidas son: ${extensionesValidas}`)
            $('#inputFileImagen').val('');
        }

    }

    let visualizarImagen = (input) => {
        if (input.files) {
            let reader = new FileReader()
            reader.onload = elemento => {
                $('#img').attr('src', elemento.target.result)
            }
            reader.readAsDataURL(input.files[0])
        }
    }

    $('.soloLetras').on('keypress', (e) => {
        let entrada = String.fromCharCode(e.which)
        let inputFiled = e.target
        let ErrorMessage = inputFiled.parentNode.querySelector('.error')
        ErrorMessage.textContent = '';
        if (!(/[a-z A-Z]/).test(entrada)) {
            e.preventDefault()
            inputFiled.style.borderColor = 'red'
            ErrorMessage.textContent = 'Solo se aceptan letras'
        } else {
            console.log("Si es una letra")
            inputFiled.style.borderColor = "green"
        }

        //borrarSpam(entrada, e)
    })



    $('.soloNumeros').on('keypress', (e) => {
        let entrada = String.fromCharCode(e.which)
        let inputFiled = e.target
        let ErrorMessage = inputFiled.parentNode.querySelector('.error')
        ErrorMessage.textContent = '';
        if (!(/^[0-9]*$/).test(entrada)) {
            e.preventDefault()
            inputFiled.style.borderColor = 'red'
            ErrorMessage.textContent = 'Solo se aceptan numeros'
        } else {
            console.log("Si es un numero")
            inputFiled.style.borderColor = "green"
        }
    })

    $('.validarEmail').on('blur', (e) => {

        let inputField = e.target;
        let email = inputField.value.trim();
        let ErrorMessage = inputField.parentNode.querySelector('.error');
        console.log(ErrorMessage)
        ErrorMessage.textContent = '';

        var EmailRegex = /^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

        if (!EmailRegex.test(email)) {
            inputField.style.borderColor = 'red';
            ErrorMessage.textContent = 'Correo electronico es invalido';
        }
        else {
            inputField.style.borderColor = 'green';
        }
    })

    $('#contraseniaUno').on('blur', (e) => {
        let inputFiled = e.target
        let entrada = inputFiled.value.trim();
        let ErrorMessage = inputFiled.parentNode.querySelector('.error')
        ErrorMessage.textContent = '';
        if (!(/^(?=.*\d)(?=.*[\u0021-\u002b\u003c-\u0040])(?=.*[A-Z])(?=.*[a-z])\S{8,16}$/).test(entrada)) {
            inputFiled.style.borderColor = "red"
            ErrorMessage.textContent = 'la contraseña es incorrecta'
        } else {
            e.preventDefault()
            console.log("la contraseña es correcta")
            inputFiled.style.borderColor = 'green'
        }
    })

    $('#contraseniaDos').blur((e) => {
        let inputFiled = e.target
        let entrada = inputFiled.value.trim();
        let ErrorMessage = inputFiled.parentNode.querySelector('.error')
        ErrorMessage.textContent = '';
        if (!(/^(?=.*\d)(?=.*[\u0021-\u002b\u003c-\u0040])(?=.*[A-Z])(?=.*[a-z])\S{8,16}$/).test(entrada)) {

            //ErrorMessage.textContent = 'la contraseña es incorrecta'
        } else {
            e.preventDefault()
            console.log("la contraseña es correcta")

        }

        //validar contraseñas cohincidan
        let contraseniaUno = $('#contraseniaUno').val()
        let contraseniaDos = $('#contraseniaDos').val()
        if (contraseniaUno == contraseniaDos) {
            //console.log("La contraseña es correcta")
            //ErrorMessage.textContent = 'la contraseña es correcta'
            inputFiled.style.borderColor = 'green'
        } else {
            ErrorMessage.textContent = 'la contraseña no coincide'
            console.log("La contraseña es incorrecta")
            inputFiled.style.borderColor = "red"
        }
    })

    //Validar CURP

    function validarInput(input) {
        var curp = input.value.toUpperCase(),
            //resultado = $("#resultado"),
            valido = "no es válida";
        let inputFiled = input
        let ErrorMessage = inputFiled.parentNode.querySelector('.error')
        ErrorMessage.textContent = '';
        if (curpValida(curp)) {
            valido = "es válida";
            inputFiled.style.borderColor = 'green'
        } else {
            inputFiled.style.borderColor = "red"
        }

        //ErrorMessage.textContent = `la CURP ${valido}`
        //resultado.innerText = "CURP: " + curp + "\nFormato: " + valido;
    }
    function curpValida(curp) {
         var re = /^([A-Z][AEIOUX][A-Z]{2}\d{2}(?:0\d|1[0-2])(?:[0-2]\d|3[01])[HM](?:AS|B[CS]|C[CLMSH]|D[FG]|G[TR]|HG|JC|M[CNS]|N[ETL]|OC|PL|Q[TR]|S[PLR]|T[CSL]|VZ|YN|ZS)[B-DF-HJ-NP-TV-Z]{3}[A-Z\d])(\d)$/,
           validado = curp.match(re);

         if (!validado)  //Coincide con el formato general?
                return false;

            //Validar que coincida el dígito verificador
         function digitoVerificador(curp17) {
             //Fuente https://consultas.curp.gob.mx/CurpSP/
             var diccionario = "0123456789ABCDEFGHIJKLMNÑOPQRSTUVWXYZ",
                 lngSuma = 0.0,
                 lngDigito = 0.0;
             for (var i = 0; i < 17; i++)
                 lngSuma = lngSuma + diccionario.indexOf(curp17.charAt(i)) * (18 - i);
             lngDigito = 10 - lngSuma % 10;
             if (lngDigito == 10)
                return 0;
             return lngDigito;
         }
         if (validado[2] != digitoVerificador(validado[1]))
             return false;

         return true; //Validado
    }

    $('.borrarSpam').blur((e) => {

        let inputFiled = e.target
        let ErrorMessage = inputFiled.parentNode.querySelector('.error')
        if (inputFiled.value != "") {
            ErrorMessage.textContent = '';
            inputFiled.style.borderColor = 'green';
        } else {
            inputFiled.style.borderColor = 'red';
        }

    })

    $('.colorInput').blur(e => {
        let inputFiled = e.target
        if (inputFiled.value != "") {
            inputFiled.style.borderColor = 'green';
        } else {
            inputFiled.style.borderColor = 'red';
        }
    })

    $('#form').submit((e) => {
        let inputs = $('input').toArray()
        console.log(inputs)
        let valido = true;
        console.log(inputs)

        let nuevoInput = inputs.slice(3);
        console.log(nuevoInput)
        for (let input of nuevoInput) {
            let estilo = window.getComputedStyle(input)
            let borderColor = estilo.borderColor
            if (borderColor != "rgb(0, 128, 0)") {
                console.log(borderColor)
                valido = false;
                console.log("informacion invalida")
                break;
            }

        }

        if (!valido) {
            e.preventDefault()
        }
    })
</script>
